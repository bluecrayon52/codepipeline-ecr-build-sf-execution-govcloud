---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  GitHubRepo:
    Type: String
  GitHubBranch:
    Type: String
  GitHubToken:
    Type: String
    NoEcho: true
  GitHubUser:
    Type: String
  MlOpsStepFunctionArn:
    Type: String  
Resources:
  Repository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken                                         
              - Resource: !Sub arn:aws-us-gov:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws-us-gov:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Repository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws-us-gov:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:                  
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - iam:PassRole
              - Resource: !GetAtt LambdaFunction.Arn 
                Effect: Allow
                Action: 
                  - lambda:InvokeFunction
  
  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - printenv | less
                - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)                
                - ECR_URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                - echo "ECR_URI=${ECR_URI}"
                - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URI}
                - dt=`date '+%m-%d-%Y-%H-%M-%S'`
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)-${dt}"                
                - IMAGE_URI="${REPOSITORY_URI}:${TAG}"
                - echo "IMAGE_URI=${IMAGE_URI}"
            build:
              commands:
                - cd container
                - docker build --tag "$IMAGE_URI" .
            post_build:
              commands:
                - docker push "$IMAGE_URI"
                - cd ..
                - printf '{"commitID":"%s","imageUri":"%s"}' "$TAG" "$IMAGE_URI" > sf_start_params.json
          artifacts:
            files: sf_start_params.json
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildServiceRole  

  LambdaIAMRole:
    Type: AWS::IAM::Role 
    Properties: 
      Path: / 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Principal: 
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws-us-gov:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws-us-gov:iam::aws:policy/AWSCodePipelineCustomActionAccess
      Policies: 
        - PolicyName: StateMachineLambdaProxyPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement: 
              - Effect: Allow
                Action: 
                  - states:DescribeStateMachine
                  - states:StartExecution
                  - states:DescribeExecution 
                Resource: !Ref MlOpsStepFunctionArn
              - Effect: Allow
                Action: 
                  - s3:GetObject
                Resource: !Sub arn:aws-us-gov:s3:::${ArtifactBucket}/*

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaIAMRole.Arn 
      Handler: index.lambda_handler
      Environment: 
        Variables:
          smArn: !Ref MlOpsStepFunctionArn
      Code:
        ZipFile: |
          import boto3
          import json
          import os

          def lambda_handler(event, context):
              # Retrieve the input artifact from the CodeBuild stage
              job_id = event['CodePipeline.job']['id']
              input_artifact = event['CodePipeline.job']['data']['inputArtifacts'][0]
              artifact_s3_bucket = input_artifact['location']['s3Location']['bucketName']
              artifact_s3_key = input_artifact['location']['s3Location']['objectKey']

              # Download the input artifact file
              s3 = boto3.client('s3')
              temp_zip_path = '/tmp/sf_start_params.zip'  # Temporary zip file path on the Lambda execution environment
              s3.download_file(artifact_s3_bucket, artifact_s3_key, temp_zip_path)
    
              # Extract the contents of the zip file
              temp_extracted_dir = tempfile.mkdtemp()  # Temporary directory for extracting zip contents
              with zipfile.ZipFile(temp_zip_path, 'r') as zip_ref:
                  zip_ref.extractall(temp_extracted_dir)

              # Read the contents of the input file
              input_file_path = os.path.join(temp_extracted_dir, 'sf_start_params.json')
              with open(input_file_path, 'r') as file:
                  input_data = json.load(file)

              # Start the Step Functions state machine execution
              stepfunctions = boto3.client('stepfunctions')
              state_machine_arn = os.environ.get('smArn')
              execution_name = 'mlops_execution'  # Provide a unique name for the execution

              response = stepfunctions.start_execution(
                  stateMachineArn=state_machine_arn,
                  name=execution_name,
                  input=json.dumps(input_data)
              )

              # Print the execution ARN for reference
              print(f'Started Step Functions execution: {response["executionArn"]}')

              # Tell CodePipeline that the job is complete
              codepipeline_client = boto3.client('codepipeline')
              codepipeline_client.put_job_success_result(jobId=job_id)
        
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: MLOpsPipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: GetSource
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1       
        - Name: BuildContainerAndInvokeLambda
          Actions:
            - Name: BuildCustomContainerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutputImage
              RunOrder: 1     
            - Name: InvokeLambda
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                FunctionName: !Ref LambdaFunction
              InputArtifacts:
                - Name: BuildOutputImage
              RunOrder: 2

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
  ArtifactBucket:
    Value: !Ref ArtifactBucket